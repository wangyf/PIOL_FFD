#!/usr/bin/env #python
# Input file for PIOL

#Topology of fault
#Fault is on x-y plane and z axis is normal to fault

debug = 0             #debug option in IO 0 by default
dt = 0.002            #time step consistent input moment rate tensor
dx = (25, 25, 25)     #subfault discretization
itio = 50             #IO option no need to change unless you would like improve performance
itstats = 10          #IO option no need to change unless you would like improve performance
mpin = 1              #IO option no need to change unless you would like improve performance
mpout = 1             #IO option no need to change unless you would like improve performance
nn = (113, 113, 1)    #Fault dimension (how many nodes along x, y and z axis)
np3 = (1, 1, 1)       #cores set along x, y and z axis for parallelization
nt = 1501             #total time steps of input moment rate tensor
tm0 = 0.0             #Initial time
infile = 'in/'        #Input folder
oufile = 'out/'       #Output folder
#**********************************************************
#User customized field (Far-field displacement)
radius = 1e6 #m       #station to fault distance (Theoretically insenstive to result but may impact it due to discretization of time and space)
rho = 2670. #kg/m^3   # Density, vp and vs of wholespace.
vp = 6000. #m/s
vs = 3464. #m/s

#receiver 
t0s = 160. #sec       #P wave compuatation window (t0s-t0e). Finally this code generates a p wave (t0s-t0e)
t0e = 220.
t1s = 0.              #pP wave compuatation window (t0s-t0e). Finally this code generates a pP wave (t0s-t0e)
t1e = 0.
t2s = 0.
t2e = 0.
t3s = 280.
t3e = 340.
dtheta = 90.
dphi = 360.
# otheta and ophi are optional (must after dtheta and dphi)
otheta = 60
ophi = 160.

comp = 1
endian = 0  # read big-endian data on little-endian machine
usrorig = 2 # 0-> origin is at origin in SORD coordinate
            # 1-> origin on free surface but horizontal coordinate is adjusted to center of fault
            # 2-> origin is average to fault  
nsourceoffset = 1
sourceoffset = (0,0,0,0)
#sourceoffset =  (xoffset,yoffset,zoffset,toffset) # move source but keep receiver fixed  
#**********************************************************

fieldio = [
# define a constant field
#('=', 1, 'const', 1.0, (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), 1, [(1, 41, 1), (1, 41, 1), (1, 2, 1), (0, 0, 1)], '-', 2670.0, ['rho']),
# read or write a file name
('=r', 1, 'const', 1.0, (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), 1,  [(1, 113, 1), (1, 113, 1), (1, 1, 1), (0, 0, 1)], 'faultx', 1.0, ['faultx']),
('=r', 1, 'const', 1.0, (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), 1,  [(1, 113, 1), (1, 113, 1), (1, 1, 1), (0, 0, 1)], 'faulty', 1.0, ['faulty']),
('=r', 1, 'const', 1.0, (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), 1,  [(1, 113, 1), (1, 113, 1), (1, 1, 1), (0, 0, 1)], 'faultz', 1.0, ['faultz']),
('=r', 1, 'const', 1.0, (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), 10, [(1, 113, 1), (1, 113, 1), (1, 1, 1), (1, 1501, 1)], 'mr31', 1.0, ['mr31']),
#('=w', 1, 'const', 1.0, (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), 10, [(1, 161, 1), (1, 1, 1), (1, 2, 1), (1, 801, 1)], 'tinti', 1.0, ['tinti']),
# note:
# 1. static field (it == 0)
#         ii(:,4) = (0,0,1)
#    static field (it == nt)
#         ii(:,4) = (nt,nt,1)
# 2. time-variable (it = from 1,nt)
#         ii(:,4) = (1,nt,1)
]
